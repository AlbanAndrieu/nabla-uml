<?xml version="1.0" encoding="${xmlEncoding}"?>
<!--
     Attention: Generated code! Do not modify by hand!
     Generated by: persistence.xml.vsl in andromda-ejb3-cartridge.
-->
<persistence
    xmlns="http://java.sun.com/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
                        http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
    version="1.0">
    <persistence-unit name="${entityManagerName}">
        <provider>org.hibernate.ejb.HibernatePersistence</provider>
#if ($stringUtils.isNotBlank(${dataSource}))
        <jta-data-source>${dataSource}</jta-data-source>
#end
#if ($stringUtils.isNotBlank($jarFiles))
#**##set ($jars = $stringUtils.split($jarFiles,','))
#**##foreach ($jar in $jars)
#*  *##if ($stringUtils.isNotBlank($jar))
        <jar-file>${jar}</jar-file>
#*  *##end
#**##end
#end
        <properties>
#if ($stringUtils.isNotBlank($hibernateHbm2DDLAuto))
            <property name="hibernate.hbm2ddl.auto" value="${hibernateHbm2DDLAuto}"/>
#end
#if ($stringUtils.isNotBlank($hibernateShowSql))
            <property name="hibernate.show_sql" value="${hibernateShowSql}"/>
#end
#if ($stringUtils.isNotBlank($hibernateDialect))
            <property name="hibernate.dialect" value="${hibernateDialect}"/>
#end
#if ($stringUtils.isNotBlank($hibernateMaxFetchDepth))
            <property name="hibernate.max_fetch_depth">$hibernateMaxFetchDepth</property>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcFetchSize))
            <property name="hibernate.jdbc.fetch_size">$hibernateJdbcFetchSize</property>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcBatchSize))
            <property name="hibernate.jdbc.batch_size">$hibernateJdbcBatchSize</property>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcUseScrollableResultSet))
            <property name="hibernate.jdbc.use_scrollable_resultset">$hibernateJdbcUseScrollableResultSet</property>
#end
#if ($stringUtils.isNotBlank($hibernateJdbcUseStreamsForBinary))
            <property name="hibernate.jdbc.use_streams_for_binary">$hibernateJdbcUseStreamsForBinary</property>
#end
#if ($hibernateEnableCache.equalsIgnoreCase("true"))
#**##if ($stringUtils.isNotBlank($hibernateCacheProvider))
            <property name="hibernate.cache.provider_class" value="${hibernateCacheProvider}"/>
#**##end
#**##if ($stringUtils.isNotBlank($hibernateTreecacheMbeanObject))
            <property name="hibernate.treecache.mbean.object_name" value="${hibernateTreecacheMbeanObject}"/>
#**##end
#end
#if ($hibernateEnableCache.equalsIgnoreCase("true"))
#**##foreach ($entity in $entities)
#*  *##foreach ($finder in $entity.getQueryOperations(true))
#*    *##if ($finder.useQueryCache)
#*      *##set ($hibernateEnableQueryCache = "true")
#*    *##end
#*  *##end
#**##end
#**##if ($hibernateEnableQueryCache.equalsIgnoreCase("true"))
            <property name="hibernate.cache.use_query_cache">${hibernateEnableQueryCache}</property>
#**##end
#end
#if ($stringUtils.isNotBlank($hibernateTransactionManagerLookupClass))
            <property name="hibernate.transaction.manager_lookup_class" value="${hibernateTransactionManagerLookupClass}"/>
#end
#if ($stringUtils.isNotBlank($hibernateTransactionFlushBeforeCompletion))
            <property name="hibernate.transaction.flush_before_completion" value="${hibernateTransactionFlushBeforeCompletion}"/>
#end
#if ($stringUtils.isNotBlank($hibernateTransactionAutoCloseSession))
            <property name="hibernate.transaction.auto_close_session" value="${hibernateTransactionAutoCloseSession}"/>
#end
        </properties>
    </persistence-unit>
#foreach ($persistenceContext in $persistenceContexts)
    <persistence-unit name="${persistenceContext.unitName}">
#**##if ($stringUtils.isNotBlank(${persistenceContext.datasource}))
        <jta-data-source>${persistenceContext.datasource}</jta-data-source>
#**##end
        <properties>
#**##if ($stringUtils.isNotBlank($hibernateHbm2DDLAuto))
            <property name="hibernate.hbm2ddl.auto" value="${hibernateHbm2DDLAuto}"/>
#**##end
#**##if ($stringUtils.isNotBlank($hibernateShowSql))
            <property name="hibernate.show_sql" value="${hibernateShowSql}"/>
#**##end
#**##if ($stringUtils.isNotBlank($hibernateDialect))
            <property name="hibernate.dialect" value="${hibernateDialect}"/>
#**##end
#**##if ($stringUtils.isNotBlank($hibernateMaxFetchDepth))
            <property name="hibernate.max_fetch_depth">$hibernateMaxFetchDepth</property>
#**##end
#**##if ($stringUtils.isNotBlank($hibernateJdbcFetchSize))
            <property name="hibernate.jdbc.fetch_size">$hibernateJdbcFetchSize</property>
#**##end
#**##if ($stringUtils.isNotBlank($hibernateJdbcBatchSize))
            <property name="hibernate.jdbc.batch_size">$hibernateJdbcBatchSize</property>
#**##end
#**##if ($stringUtils.isNotBlank($hibernateJdbcUseScrollableResultSet))
            <property name="hibernate.jdbc.use_scrollable_resultset">$hibernateJdbcUseScrollableResultSet</property>
#**##end
#**##if ($stringUtils.isNotBlank($hibernateJdbcUseStreamsForBinary))
            <property name="hibernate.jdbc.use_streams_for_binary">$hibernateJdbcUseStreamsForBinary</property>
#**##end
#**##if ($hibernateEnableCache.equalsIgnoreCase("true"))
#*  *##if ($stringUtils.isNotBlank($hibernateCacheProvider))
            <property name="hibernate.cache.provider_class" value="${hibernateCacheProvider}"/>
#*  *##end
#*  *##if ($stringUtils.isNotBlank($hibernateTreecacheMbeanObject))
            <property name="hibernate.treecache.mbean.object_name" value="${hibernateTreecacheMbeanObject}"/>
#*  *##end
#**##end
#**##if ($hibernateEnableCache.equalsIgnoreCase("true") && $hibernateEnableQueryCache.equalsIgnoreCase("true"))
            <property name="hibernate.cache.use_query_cache">${hibernateEnableQueryCache}</property>
#**##end
#**##if ($stringUtils.isNotBlank($hibernateTransactionManagerLookupClass))
            <property name="hibernate.transaction.manager_lookup_class" value="${hibernateTransactionManagerLookupClass}"/>
#**##end
#**##if ($stringUtils.isNotBlank($hibernateTransactionFlushBeforeCompletion))
            <property name="hibernate.transaction.flush_before_completion" value="${hibernateTransactionFlushBeforeCompletion}"/>
#**##end
#**##if ($stringUtils.isNotBlank($hibernateTransactionAutoCloseSession))
            <property name="hibernate.transaction.auto_close_session" value="${hibernateTransactionAutoCloseSession}"/>
#**##end
        </properties>
    </persistence-unit>
#end
</persistence>
