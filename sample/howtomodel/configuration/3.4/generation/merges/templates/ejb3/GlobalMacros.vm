##
##  This macro will render the equals() method
##  If an entity is rendered, the attributeSet consists of the identifiers,
##  if an value type is renderer, the attributeSet consists of all attributes
##
##  If an entity contains a composite primary key consisting of more than 1
##  identifier, must call accessor on PK object.
##
#macro (renderEqualsMethod $class $className $attributeSet)
    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    public boolean equals(Object object)
    {
#**##if ($attributeSet.empty)
        return super.equals(object);
#**##else
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof $className))
        {
            return false;
        }
        final $className that = ($className)object;
#*  *##foreach ($attribute in $attributeSet)
#*    *##set ($idType = $attribute.type)
#*    *##if ($idType.primitive)
        if (this.#if ($class.compositePrimaryKeyPresent)getPk().#end${attribute.getterName}() != that.#if ($class.compositePrimaryKeyPresent)getPk().#end${attribute.getterName}())
        {
            return false;
        }
#*    *##elseif ($idType.arrayType)
        if (!java.util.Arrays.equals(this.#if ($class.compositePrimaryKeyPresent)getPk().#end${attribute.getterName}(), that.#if ($class.compositePrimaryKeyPresent)getPk().#end${attribute.getterName}()))
        {
            return false;
        }
#*    *##else
        if (this.#if ($class.compositePrimaryKeyPresent)getPk().#end${attribute.getterName}() == null || that.#if ($class.compositePrimaryKeyPresent)getPk().#end${attribute.getterName}() == null || !this.#if ($class.compositePrimaryKeyPresent)getPk().#end${attribute.getterName}().equals(that.#if ($class.compositePrimaryKeyPresent)getPk().#end${attribute.getterName}()))
        {
            return false;
        }
#*    *##end
#*  *##end
        return true;
#**##end
    }
#end
##
##  This macro will render the hashCode() method
##  If an entity is rendered, the attributeSet consists of the identifiers,
##  if an value type is renderer, the attributeSet consists of all attributes
##
##  If an entity contains a composite primary key consisting of more than 1
##  identifier, must call accessor on PK object.
##
#macro (renderHashCodeMethod $class $attributeSet)
    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    public int hashCode()
    {
#**##if ($attributeSet.empty)
        return super.hashCode();
#**##else
#*  *##if ($class.generalization)
        int hashCode = super.hashCode();
#*  *##else
        int hashCode = 0;
#*  *##end
#*  *##foreach ($attribute in $attributeSet)
#*    *##set ($attrType = $attribute.type)
#*    *##if  ($attribute.getterSetterTypeName == "boolean")
        hashCode = 29 * hashCode + (#if ($class.compositePrimaryKeyPresent)this.getPk().#end${attribute.getterName}() ? 1 : 0);
#*    *##elseif ($attrType.arrayType)
        // arrays are not part of the hashCode calculation
#*    *##elseif ($attrType.primitive)
        hashCode = 29 * hashCode + (int)#if ($class.compositePrimaryKeyPresent)this.getPk().#end${attribute.getterName}();
#*    *##else
        hashCode = 29 * hashCode + (#if ($class.compositePrimaryKeyPresent)this.getPk().#end${attribute.getterName}() == null ? 0 : #if ($class.compositePrimaryKeyPresent)this.getPk().#end${attribute.getterName}().hashCode());
#*    *##end## if
#*  *##end## foreach

        return hashCode;
#**##end## $attributeSet.empty
    }
#end
##
##  This macro will render the toString() method
##  If an entity is rendered, the attributeSet consists of the identifiers,
##  if an value type is renderer, the attributeSet consists of all attributes
##
##  If an entity contains a composite primary key consisting of more than 1
##  identifier, must call accessor on PK object.
##
#macro (renderToStringMethod $class $className $attributeSet)
    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    public String toString()
    {
#**##if ($attributeSet.empty)
        return super.toString();
#**##else
        StringBuilder sb = new StringBuilder();
        sb.append("${className}(=");
#*  *##if ($class.generalization)
        sb.append(super.toString());
#*  *##end
#*  *##set( $sep = "" )
#*  *##foreach ($attribute in $attributeSet)
#*    *##set ($attrType = $attribute.type)
        sb.append("${sep}#if ($class.compositePrimaryKeyPresent && $attribute.identifier)pk.#end${attribute.name}: ");
        sb.append(#if ($class.compositePrimaryKeyPresent && $attribute.identifier)this.getPk().#end${attribute.getterName}()#if ($attribute.containsEmbeddedObject).toString()#end);
#*    *##set( $sep = ", " )
#*  *##end## foreach
        sb.append(")");
        return sb.toString();
#**##end## $attributeSet.empty
    }
#end
##
##  This macro will render the compareTo(Object o) method
##  This is required since each entity implements Comparable<T>
##
#macro (renderCompareToMethod $class $className $identifiers)
    /**
     * @see Comparable${esc.hash}compareTo(T)
     */
    public int compareTo($className o)
    {
        int cmp = 0;
#**##if ($identifiers.size() > 1)
        if (this.getPk() != null)
        {
            cmp = this.getPk().compareTo(o.getPk());
        }
#**##else
#*  *##set ($identifier = $identifiers.iterator().next())
        if (this.${identifier.getterName}() != null)
        {
            cmp = this.${identifier.getterName}().compareTo(o.${identifier.getterName}());
        }
#**##end
#**##set ($attributes = $class.attributes)
#**##if (!$attributes.empty)
        else
        {
#*  *##foreach ($attribute in $attributes)
#*    *##if (!$attribute.type.primitive && !$attribute.type.arrayType && !$attribute.lob && !$attribute.identifier && !$attribute.containsEmbeddedObject && !$attribute.type.collectionType)
            if (this.${attribute.getterName}() != null)
            {
                cmp = (cmp != 0 ? cmp : this.${attribute.getterName}().compareTo(o.${attribute.getterName}()));
            }
#*    *##end
#*  *##end
        }
#**##end
        return cmp;
    }
#end
